1.继承属于扩展形式之一,但不见得是达到弹性设计的最佳方式
2.在我们的设计中应该允许行为可以被扩展,而无需修改现有的代码
3.组合和委托可用于在运行时动态地加上新的行为
4.除了继承,装饰着模式也可以让我们扩展行为
5.装饰者模式意味着一群装饰者类,这些类用来包装具体组件
6.装饰者类反映出被装饰的组件类型(事实上,他们具有相同的类型,都经过接口或继承实现)
7.装饰者可以在被装饰者行为前面或后面加上自己的行为,甚至将被装饰者的行为整个取代掉
8.可以用无数个装饰者包装一个组件
9.装饰者一般对组件的客户是透明的,除非客户程序依赖于组件的具体类型
10.装饰者会导致设计中出现许多小对象,过度使用,会让程序变复杂

